#!/usr/bin/env ruby

$ingresos = []
$ingresos_pc = []

open('ncv_concentrado_2014_concil_2010.csv').each_with_index do |l,i|
  next if i == 0
  cols = l.split(',')

  factor = cols[8].to_i
  integ = cols[13].to_i
  ingreso = cols[23].to_f

  # por hogar
  $ingresos << [ingreso, factor]

  # per capita
  $ingresos_pc << [ingreso / integ, factor * integ]
end

def average_quantiles(data, probs)
  data = data.sort_by(&:first)

  total_weight = data.map(&:last).reduce(:+)

  cuts = probs.map { |p| total_weight * p }
  cuts << total_weight

  quantiles = []
  sum = cut = cum_weight = 0

  data.each do |value, weight|
    cum_weight += weight

    if cum_weight >= cuts[cut]
      cur_cut = cuts[cut]
      prev_cut = cut > 0 ? cuts[cut - 1] : 0

      # chunk weight
      weight = cur_cut - (cum_weight - weight)

      quantiles[cut] = (sum + (value * weight)) / (cur_cut - prev_cut)

      # remaining weight
      weight = cum_weight - cur_cut

      sum = 0
      cut += 1
    end

    sum += value * weight
  end

  quantiles
end

def gen_probs(num, from=0, to=1)
  step = (to - from) / num.to_f
  (1..(num - 1)).map { |e| from + e * step }
end

def print_averages(data, probs)
  quantiles = average_quantiles(data, probs)
  quantiles.each_with_index do |e, i|
    puts '%02i %.0f' % [i + 1, e]
  end
end

DECILES = gen_probs(10)

puts 'Ingresos por hogar'
puts '------------------'
deciles = print_averages($ingresos, DECILES)

deciles_inegi = [6_902, 12_035, 16_058, 20_082, 24_439, 29_532, 36_094, 45_593, 62_840, 143_850]
raise 'Failed check' unless deciles.map(&:round) == deciles_inegi

puts


puts 'Ingresos per c√°pita'
puts '-------------------'
deciles = print_averages($ingresos_pc, DECILES)

deciles_inegi_pc = [1_674, 3_033, 3_977, 4_900, 5_959, 7_183, 8_800, 11_313, 16_012, 42_120]
raise 'Failed check' unless deciles.map(&:round) == deciles_inegi_pc
